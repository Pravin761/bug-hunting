import React from 'react';
import { ScanResult, Vulnerability } from '../types';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

interface VulnerabilityReportProps {
  scanResults: ScanResult[];
}

const VulnerabilityReport: React.FC<VulnerabilityReportProps> = ({ scanResults }) => {
  const renderSeverityBadge = (severity: Vulnerability['severity']) => {
    const colors = {
      Low: 'bg-yellow-100 text-yellow-800',
      Medium: 'bg-orange-100 text-orange-800',
      High: 'bg-red-100 text-red-800',
      Critical: 'bg-purple-100 text-purple-800',
    };
    return (
      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${colors[severity]}`}>
        {severity}
      </span>
    );
  };

  const chartData = scanResults.map(result => ({
    name: new Date(result.startTime).toLocaleDateString(),
    Critical: result.criticalCount,
    High: result.highCount,
    Medium: result.mediumCount,
    Low: result.lowCount,
  }));

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h2 className="text-2xl font-semibold mb-4">Vulnerability Report</h2>
      {scanResults.length === 0 ? (
        <p>No scan results available. Start a new scan to see vulnerabilities.</p>
      ) : (
        <>
          <div className="mb-6" style={{ width: '100%', height: 300 }}>
            <ResponsiveContainer>
              <BarChart data={chartData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="Critical" fill="#9f7aea" />
                <Bar dataKey="High" fill="#f56565" />
                <Bar dataKey="Medium" fill="#ed8936" />
                <Bar dataKey="Low" fill="#ecc94b" />
              </BarChart>
            </ResponsiveContainer>
          </div>
          {scanResults.map((result) => (
            <div key={result.id} className="mb-6 border-b pb-4">
              <h3 className="text-lg font-semibold mb-2">Scan Result: {result.targetUrl}</h3>
              <p className="text-sm text-gray-600 mb-2">
                Start Time: {new Date(result.startTime).toLocaleString()}
              </p>
              <p className="text-sm text-gray-600 mb-4">
                End Time: {new Date(result.endTime).toLocaleString()}
              </p>
              <h4 className="text-md font-semibold mb-2">Detected Vulnerabilities:</h4>
              <ul className="space-y-4">
                {result.vulnerabilities.map((vuln) => (
                  <li key={vuln.id} className="border-l-4 border-indigo-500 pl-4">
                    <div className="flex justify-between items-start">
                      <span className="font-medium">{vuln.name}</span>
                      {renderSeverityBadge(vuln.severity)}
                    </div>
                    <p className="text-sm text-gray-600 mt-1">{vuln.description}</p>
                    <p className="text-sm text-gray-800 mt-2">
                      <strong>Category:</strong> {vuln.category}
                    </p>
                    <p className="text-sm text-gray-800 mt-1">
                      <strong>Affected URL:</strong> {vuln.affectedUrl}
                    </p>
                    <p className="text-sm text-gray-800 mt-1">
                      <strong>Affected Element:</strong> {vuln.affectedElement}
                    </p>
                    <p className="text-sm text-gray-800 mt-1">
                      <strong>HTTP Method:</strong> {vuln.httpMethod}
                    </p>
                    <p className="text-sm text-gray-800 mt-1">
                      <strong>Remediation:</strong> {vuln.remediation}
                    </p>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </>
      )}
    </div>
  );
};

export default VulnerabilityReport;